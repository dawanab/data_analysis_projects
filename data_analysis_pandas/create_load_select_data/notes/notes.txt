I. CREATING, LOADING, AND SELECTING DATA WITH PANDAS
ðŸŸ£ Importing the Pandas Module ------------------------------------------------->
    > Pandas is a Python module for working with tabular data 
    (table with rows and columns).
    > In order to access the Pandas module, we need to install the module and 
    then import it into a Python file. (It's common to alias pandas as pd).


ðŸŸ£ Create a DataFrame ---------------------------------------------------------->
    > A DataFrame is an object that stores data as rows and columns. Think 
    of it as a SQL table or a spreadsheet. You can manually create one, or
    have it populated with data from a CSV, or SQL query. 
    > Each row in the data frame has an index that is a integer and a column 
    that has a string for a name. DataFrames can contain many different 
    data types. 

    > When adding data using lists, we would pass a list of lists, where 
    each inner list represents a row of data. Use the keyword arguement 
    columns to pass a list of column names. 


ðŸŸ£ Comma Separated Variables (CSV) --------------------------------------------->
    > One the of the most common formats for working with datasets that al-
    ready exist is the CSV. It's a text-only spreadsheet format. You can 
    find them in: online datasets like data.gov, export from excel or 
    google sheets, or an export from SQL.

    > The first row of a CSV contains column headings. All subsequent rows 
    contain values. Each, being separated by a comma:
        name,cake_flavor,frosting_flavor,topping
        Chocolate Cake,chocolate,chocolate,chocolate shavings
        Birthday Cake,vanilla,vanilla,rainbow sprinkles
        Carrot Cake,carrot,cream cheese,almonds


ðŸŸ£ Loading and Saving CSVs ----------------------------------------------------->
Important keywords in this section (for me): .read_csv(), .to_csv()
    > When you have data in a CSV, you can load it into a DataFrame in 
    Pandas using .read_csv

    > We can also save data to a CSV, using .to_csv()


ðŸŸ£ Inspect A DataFrame --------------------------------------------------------->
Important keywords in this section (for me): .head(), df.info(), print(df)
    > When we load a DataFrame from a CSV, we want to know what it looks
    like. If it is a smaller df, you can display it with print(df).
    It it's a larger df, it may be helpful to inspect a few items without
    having to look at the entire DataFrame.

    > The method .head() gives the first 5 rows of a DataFrame. If you want 
    to see more rows, pass in the positional argument.

    > The method df.info() gives some statistics for each column. 


ðŸŸ£ Select Columns --------------------------------------------------------------->
    > There are two possible syntaxes for selecting all values from a column:
        1. Select the column as if you were selecting a value from a dictionary
        using a key:  customers["age"] 
        2. If the name of a column follows all of the rules for a variable name,
        then you can select it using dot notation: df.MySecondColumm

    > When we select a single column, the result is called a Series. 


ðŸŸ£ Selecting Multiple Columns --------------------------------------------------->
    > To select two or more columns from a DataFrame, use a list of the 
    column names. Make sure to use a double set of brackets ( [[]] ) or 
    this command wont work: new_df = orders[['last_name', 'email']]


ðŸŸ£ Selecting Rows ------------------------------------------------------>
    > DataFrames are zero-indexed. When we select a single row, the result is a
    Series. The notation is as such: orders.iloc[2]


ðŸŸ£ Selecting Multiple Rows ------------------------------------------------------>
    > We can use slicing to select certain rows: 
    * orders.iloc[3:7] - selects all rows starting at the third row and up to but not including the seventh row.

    * orders.iloc[:4] - selects all rows up to, but not including the fourth row

    * orders.iloc[-3:] - selects the rows starting at the thrid to last row and 
    up to but not including the final row

    
ðŸŸ£ Select Rows with Logic ------------------------------------------------------->
    > You can select a subset of a DataFrame by using logical statements:
        Ex) df[df.MyColumnName == desired_column_value]

        Ex) df[age == 30]
        Ex) df[df.age > 30]

    > You can combine multiple logical statements, as long as each one is 
    in parentheses.
        Ex) df[(df.age < 30 ) | (df.name == "Martha Jones")]

    > You can use the isin command to check that df.name is one of a list 
    of values. 
        Ex) df[df.name.isin(["Martha Jones", "Rose Tyler", "Amy Pond"])]


ðŸŸ£ Setting Indicies -------------------------------------------------------------->
    > When we select a subset of a DataFrame using logiv, we end up with non-
    consecutive indices. We can fix this by using .reset_index(). If we run 
    the command df.reset_index(drop=True), we get a new DataFrame without 
    an extra column

    > using .reset_index() will return a new DataFrame, but we usually want to 
    modify our existing DataFrame. We can use inplace=True to do this.




    